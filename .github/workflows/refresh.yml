name: Rolling Update WordPress Container

on:
  workflow_call:
    secrets:
      ACR_USERNAME:
        required: true
      ACR_PASSWORD:
        required: true
      AUTH_KEY_SALT:
        required: true
      SECURE_AUTH_KEY_SALT:
        required: true
      LOGGED_IN_KEY_SALT:
        required: true
      NONCE_KEY_SALT:
        required: true
      AUTH_SALT:
        required: true
      SECURE_AUTH_SALT:
        required: true
      LOGGED_IN_SALT:
        required: true
      NONCE_SALT:
        required: true
env:
  RESOURCE_GROUP: Rg-DevOps-GWC-02
  ACR_LOGIN_SERVER: containerregistrywordpressgwc01.azurecr.io
  CONTAINER_NAME_PREFIX: container-wordpress-
  STORAGE_ACCOUNT_NAME: saccountwordpressgwc01
  FILE_SHARE_NAME: wpcontent
  IMAGE_TAG: latest

jobs:
  rolling-update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and Push New Image
        run: |
          docker build \
            --build-arg AUTH_KEY="${{ secrets.AUTH_KEY_SALT }}" \
            --build-arg SECURE_AUTH_KEY="${{ secrets.SECURE_AUTH_KEY_SALT }}" \
            --build-arg LOGGED_IN_KEY="${{ secrets.LOGGED_IN_KEY_SALT }}" \
            --build-arg NONCE_KEY="${{ secrets.NONCE_KEY_SALT }}" \
            --build-arg AUTH_SALT="${{ secrets.AUTH_SALT }}" \
            --build-arg SECURE_AUTH_SALT="${{ secrets.SECURE_AUTH_SALT }}" \
            --build-arg LOGGED_IN_SALT="${{ secrets.LOGGED_IN_SALT }}" \
            --build-arg NONCE_SALT="${{ secrets.NONCE_SALT }}" \
            -t ${{ env.ACR_LOGIN_SERVER }}/wordpress:${{ env.IMAGE_TAG }} .

          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ env.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
          docker push ${{ env.ACR_LOGIN_SERVER }}/wordpress:${{ env.IMAGE_TAG }}

      - name: Deploy new container
        run: |
          NEW_CONTAINER_NAME="${{ env.CONTAINER_NAME_PREFIX }}${{ github.run_number }}"
          echo "Deploying new container: $NEW_CONTAINER_NAME"

          az container create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name $NEW_CONTAINER_NAME \
            --image ${{ env.ACR_LOGIN_SERVER }}/wordpress:${{ env.IMAGE_TAG }} \
            --cpu 1 \
            --memory 1.5 \
            --ports 443 \
            --ip-address Private \
            --os-type Linux \
            --subnet ${{ secrets.SUBNET_ID }} \
            --registry-login-server ${{ env.ACR_LOGIN_SERVER }} \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --azure-file-volume-account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
            --azure-file-volume-account-key ${{ secrets.AZURE_STORAGE_KEY }} \
            --azure-file-volume-share-name ${{ env.FILE_SHARE_NAME }} \
            --azure-file-volume-mount-path /var/www/html/wp-content \
            --restart-policy Never \
            --environment-variables \
              WORDPRESS_DB_HOST="${{ secrets.DB_HOST }}" \
              WORDPRESS_DB_NAME="${{ secrets.WORDPRESS_DB_NAME }}" \
              WORDPRESS_DB_USER="${{ secrets.DB_USER }}" \
              WORDPRESS_DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              EXT_DB_HOST="${{ secrets.DB_HOST }}" \
              EXT_DB_NAME="${{ secrets.EXT_DB_NAME }}" \
              EXT_DB_USER="${{ secrets.DB_USER }}" \
              EXT_DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              AUTH_KEY="${{ secrets.AUTH_KEY_SALT }}" \
              SECURE_AUTH_KEY="${{ secrets.SECURE_AUTH_KEY_SALT }}" \
              LOGGED_IN_KEY="${{ secrets.LOGGED_IN_KEY_SALT }}" \
              NONCE_KEY="${{ secrets.NONCE_KEY_SALT }}" \
              AUTH_SALT="${{ secrets.AUTH_SALT }}" \
              SECURE_AUTH_SALT="${{ secrets.SECURE_AUTH_SALT }}" \
              LOGGED_IN_SALT="${{ secrets.LOGGED_IN_SALT }}" \
              NONCE_SALT="${{ secrets.NONCE_SALT }}" \
              CBP_ENCRYPTION_KEY="${{ secrets.CBP_ENCRYPTION_KEY }}" \
              CBP_ENCRYPTION_IV="${{ secrets.CBP_ENCRYPTION_IV }}" \
              CERT_SHARE_NAME="${{ secrets.CERT_SHARE_NAME }}"

          NEW_CONTAINER_IP=$(az container show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name $NEW_CONTAINER_NAME \
            --query "ipAddress.ip" \
            -o tsv)

          echo "New container IP: $NEW_CONTAINER_IP"

          az network lb address-pool address add \
            --resource-group ${{ secrets.LB_RESOURCE_GROUP }} \
            --lb-name "${{ secrets.LB_NAME }}" \
            --pool-name "${{ secrets.ADDRESS_POOL_NAME }}" \
            --name "${NEW_CONTAINER_NAME}-address" \
            --subnet ${{ secrets.SUBNET_ID }} \
            --ip-address $NEW_CONTAINER_IP

      - name: Deregister and destroy old containers
        run: |
          echo "Cleaning up old containers..."

          OLD_CONTAINERS=$(az container list \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "[?starts_with(name, '${{ env.CONTAINER_NAME_PREFIX }}') && name != '${{ env.CONTAINER_NAME_PREFIX }}${{ github.run_number }}'].name" \
            -o tsv)

          for CONTAINER in $OLD_CONTAINERS; do
            echo "Removing container: $CONTAINER"

            BACKEND_NAME="${CONTAINER}-address"
            az network lb address-pool address remove \
              --resource-group ${{ secrets.LB_RESOURCE_GROUP }} \
              --lb-name "${{ secrets.LB_NAME }}" \
              --pool-name "${{ secrets.ADDRESS_POOL_NAME }}" \
              --name "$BACKEND_NAME" \
              || echo "Backend $BACKEND_NAME not found."

            echo "Waiting 10 seconds before deleting container..."
            sleep 10

            az container delete \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name "$CONTAINER" \
              --yes || echo "Container $CONTAINER already deleted."
          done
